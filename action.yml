name: gha-gitops-manifest-update

inputs:
  registry:
    type: string
    description: e.g. ghcr.io/gh-user, xyz.azurecr.io or docker.io
    required: true
  repository:
    type: string
    description: Accepts multiple deployment names when separated by a space e.g. deploy1 deploy2 deploy3
    required: true
  repository-prefix:
    type: string
    description: e.g. prefix/
    required: true
  tag:
    type: string
    description: e.g. latest, latest-dev, 1.2.3
    required: true
  devcontainer-path:
    type: string
    description: e.g. .devcontainer/devcontainer.json
    default: .devcontainer/devcontainer.json
  manifest-path:
    type: string
    description: e.g. src/workloads
    required: true
  fullSemVer:
    type: string
    description: e.g. 1.2.3-feature-my-feature.12
    required: true
  repo-update-enabled:
    type: boolean
    description: If 'false' then skips the git operations entirely, e.g. action runs in demo mode
    default: true
  git-user-name:
    type: string
    description: e.g. Tom Cruise
    required: true
  git-user-email:
    type: string
    description: e.g. tom@topgun.com
    required: true
  git-branch-name:
    type: string
    description: e.g. main
    default: main

runs:
  using: composite
  steps:

    - name: setup yq (1 of 3)
      shell: bash
      run: |
        FILE=${{ inputs.devcontainer-path }}
        if [[ -f "$FILE" ]]; then
          echo "$FILE exists"
        else
          echo "::error file=${{ inputs.devcontainer-path }}::yq version is managed by the devcontainer.json, '$FILE' is therefore required!"
        fi

    - name: setup yq (2 of 3) #pull version from devcontainer.json
      shell: bash
      run: |
        npm install --global json5
        json5 -c ${{ inputs.devcontainer-path }}
        VERSION_TO_INSTALL=$(cat ${{ inputs.devcontainer-path }} | jq -r '.features[] | select(.yqVersion | . != null).yqVersion')
        echo "VERSION_TO_INSTALL=$VERSION_TO_INSTALL" >> $GITHUB_ENV
        echo "VERSION_TO_INSTALL=$VERSION_TO_INSTALL"

    - name: setup yq (3 of 3)
      shell: bash
      run: |
        sudo wget https://github.com/mikefarah/yq/releases/${{ env.VERSION_TO_INSTALL }}/download/yq_linux_amd64 -O /usr/bin/yq \
          && sudo chmod +x /usr/bin/yq

    - name: manipulate deployment
      shell: bash
      run: |
        echo "repositories=${{ inputs.repository }}"
        REPOSITORIES=(${{ inputs.repository }})
        for chartname in "${REPOSITORIES[@]}"
        do
          echo "now processing chart..."
          export CHART_NAME=$chartname                                             # e.g. authenticator
          export MANIFEST_PATH=${{ inputs.manifest-path }}/$CHART_NAME.yaml        # e.g. src/workloads/authenticator.yaml
          export CHART_REPOSITORY=${{ inputs.chart-repository-prefix }}$CHART_NAME # e.g. cas/charts/authenticator
          export REGISTRY=${{ inputs.registry }}                                   # e.g. ghcr.io/f2calv
          export REPOSITORY=$REGISTRY/${{ inputs.repository-prefix }}$CHART_NAME   # e.g. ghcr.io/f2calv/cas/authenticator
          export TAG=${{ inputs.tag }}                                             # e.g. 1.2.3

          echo "CHART_NAME=$CHART_NAME"
          echo "MANIFEST_PATH=$MANIFEST_PATH"
          echo "CHART_REPOSITORY=$CHART_REPOSITORY"
          echo "REGISTRY=$REGISTRY"
          echo "REPOSITORY=$REPOSITORY"
          echo "TAG=$TAG"
          echo "IMAGE=$IMAGE"

          if [ -f $MANIFEST_PATH ]; then
             echo "::warning title=file $MANIFEST_PATH::File $MANIFEST_PATH does not exist!"
             continue
          fi

          #update the image tag
          yq -i '. | select(.kind == "Deployment") as $deployment | select(.kind != "Deployment") as $other | $deployment.spec.template.spec.containers[] |= select(.name == "primary").image=env(IMAGE) | ($deployment, $other)' $MANIFEST_PATH

          #update the GIT_TAG env variable so we can track a deployment of new image tagged with latest-dev
          FULLSEMVER=${{ inputs.fullSemVer }}
          FULLSEMVER=$FULLSEMVER yq -i '. | select(.kind == "Deployment") as $deployment | select(.kind != "Deployment") as $other | $deployment.spec.template.spec.containers[] |= select(.name == "primary").env[] |= select(.name == "FULLSEMVER").value=env(FULLSEMVER) | ($deployment, $other)' $MANIFEST_PATH

          cat $MANIFEST_PATH

        done

    - name: repo update
      if: inputs.repo-update-enabled == 'true'
      shell: bash
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          git config --global user.email "${{ inputs.git-user-name }}"
          git config --global user.name "${{ inputs.git-user-email }}"
          git checkout ${{ inputs.git-branch-name }}
          git add --all
          git commit -m "bump '${{ inputs.repository }}' to '${{ inputs.tag }}'"
          git push -v --progress
        else
          echo "::warning title=git push::No changes to push."
        fi
